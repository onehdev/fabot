{"version":3,"sources":["ForaBot.js","ForaBotController.js","ForaBotError.js","ForaBotStatus.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtxOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"forabot.js","sourcesContent":["// MIT License\n//\n// Copyright (c) 2017 Osama Nehme (onehdev@gmail.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n/**\n * ForaBotJs - Represents a bot\n *\n * @constructor\n * @param {String} id Bot ID\n * @param {Object} data Bot data\n */\nfunction ForaBot( id, data ) {\n  var __idValidator = new RegExp('^[0-9a-zA-Z_-]+$','g');\n  if ( typeof(id) === 'string' && __idValidator.test(id) ) {\n    this.id = id;\n    this.init = null;\n    this.status = {};\n    if ( typeof(data) === 'object' ) {\n      this.name = data.name || null;\n      this.init = data.init || null;\n      this.autotypingTimeout = (typeof(data.autotypingTimeout) == 'number') ? data.autotypingTimeout : 0;\n      if ( typeof(data.status) === 'object' ) {\n        for ( var __key in data.status ) {\n          this.status[__key] = new ForaBotStatus( __key, data.status[__key], this);\n        }\n      }\n    } else {\n      this.name = null;\n      this.init = null;\n      this.autotypingTimeout = 0;\n      this.status = {};\n    }\n  } else {\n    throw new ForaBotError('ForaBot : Bot ID must be a valid string')\n  }\n}\n","/**\n * ForaBotJs - Main controller\n *\n * @constructor\n */\nfunction ForaBotController() {\n  this.botStatus = 0;\n  this.timeout = null;\n  this.timeoutOverwrite = 0;\n  this.currentStatus = null;\n  this.listeners = {};\n  this.currentBot = null;\n  console.info(this.getTime() + 'ForaBotController : Instance created');\n}\n\n/**\n * Attach an event handler function for one event\n * @param {String} eventType - Event type (can be multiple events separated by spaces)\n * @param {Function} callbackFn - Callback\n */\nForaBotController.prototype.on = function on(eventType, callbackFn) {\n  var self = this;\n  var __setListener = function(eventType, callbackFn) {\n    var listeners = self.listeners[ eventType ];\n    if ( typeof(listeners) != 'undefined' ){\n      if ( listeners.indexOf(callbackFn) == -1 ) {\n        listeners.push( callbackFn );\n      }\n    } else {\n      self.listeners[ eventType ] = [ callbackFn ];\n    }\n  }\n  if ( typeof(eventType) == 'string' ) {\n    var __splited = eventType.split(' ');\n    if (__splited.length === 1) {\n      __setListener(eventType, callbackFn);\n    } else {\n      for (var i=0; i<__splited.length; i++) {\n        __setListener(__splited[i], callbackFn);\n      }\n    }\n  }\n};\n\n/**\n * Dettach an event handler function for one event type\n * If no callbackFn specified will dettach all event's handlers\n * @param {String} eventType - Event type (can be multiple events separated by spaces)\n * @param {Function} callbackFn - Callback (optional)\n */\nForaBotController.prototype.off = function off(eventType, callbackFn) {\n  var self = this;\n  var __clearListener = function(eventType, callbackFn) {\n    var listeners = self.listeners[ eventType ];\n  \tif ( typeof(listeners) != 'undefined' ){\n      if (callbackFn) {\n        var index = listeners.indexOf(callbackFn);\n        if (index > -1) {\n          listeners.splice(index, 1);\n        }\n      } else {\n        delete self.listeners[ eventType ];\n      }\n    }\n  }\n  if ( typeof(eventType) == 'string' ) {\n    var __splited = eventType.split(' ');\n    if (__splited.length === 1) {\n      __clearListener(eventType, callbackFn);\n    } else {\n      for (var i=0; i<__splited.length; i++) {\n        __clearListener(__splited[i], callbackFn);\n      }\n    }\n  }\n};\n\n/**\n * Execute all handlers attached to an eventType\n * @param {String} eventType - Event type\n * @param {Object} data - Event data\n */\nForaBotController.prototype.trigger = function trigger(eventType, data) {\n  var listeners = this.listeners[ eventType ];\n  if ( typeof(listeners) != 'undefined' ){\n    for (var i=0; i<listeners.length; i++) {\n      if ( typeof(listeners[i]) == \"function\" ) listeners[i]( data );\n    }\n  }\n};\n\nForaBotController.prototype.load = function load( bot ) {\n  if (bot instanceof ForaBot) {\n    this.currentBot = bot;\n    console.info(this.getTime() + 'ForaBotController[load] : Bot successfully loaded');\n  } else {\n    throw new ForaBotError('ForaBotController[load] : Cannot load received bot, must be a valid ForaBot instance')\n  }\n};\n\nForaBotController.prototype.start = function start() {\n  if (this.botStatus === 0 && this.currentBot.init) {\n    console.info(this.getTime() + 'ForaBotController[start] : Starting bot...');\n    if ( typeof(this.currentBot.init) == 'string' ) {\n      this.currentStatus = this.currentBot.init;\n    } else if ( this.currentBot.init.length ) {\n      var __random = Math.floor(Math.random() * (this.currentBot.init.length));\n      this.currentStatus = this.currentBot.init[__random];\n    } else {\n      throw new ForaBotError('ForaBotController[start] : Bot\\'s initial status error, must be String or String[]!')\n    }\n    this.botStatus = 1; // Running\n    var __status = this.currentBot.status[ this.currentStatus ];\n    if ( __status ) {\n      var __timeout = 500;\n      console.info(this.getTime() + 'ForaBotController[start] : Bot is typing (' + __timeout + ' ms)');\n      this.trigger('typing', { timeout: __timeout } );\n      this.timeout = setTimeout(this.checkCurrent.bind(this), __timeout);\n    } else {\n      throw new ForaBotError('ForaBotController[start] : Bot\\'s initial status error, \"' + this.currentStatus + '\" doesn\\'t exist!');\n    }\n  } else {\n    console.info(this.getTime() + 'ForaBotController[start] : No initial status defined');\n  }\n};\n\nForaBotController.prototype.extend = function extend(defaults, overwrites){\n  for(var __key in overwrites) {\n    if( overwrites.hasOwnProperty(__key) ) {\n      defaults[__key] = overwrites[__key];\n    }\n  }\n  return defaults;\n}\n\nForaBotController.prototype.checkCurrent = function checkCurrent() {\n  if (this.currentStatus === false ) {\n    console.info(this.getTime() + 'ForaBotController[checkCurrent] : Bot says goodbye!');\n    this.trigger('finish');\n  } else if (this.currentStatus) {\n    var __status = this.currentBot.status[ this.currentStatus ];\n    var __message = this.extend( { id: Date.now() }, this.currentBot.status[ this.currentStatus ] );\n    this.botStatus = 1; // Running\n    console.info(this.getTime() + 'ForaBotController[checkCurrent] : Bot sends a message (' + this.currentStatus + ')');\n    this.trigger('message',  __message );\n    this.next();\n  }\n};\n\nForaBotController.prototype.getTime = function getTime(){\n  var __date = new Date();\n  var __hours = (__date.getHours() < 10) ? '0' + __date.getHours() : __date.getHours();\n  var __minutes = (__date.getMinutes() < 10) ? '0' + __date.getMinutes() : __date.getMinutes();\n  var __seconds = (__date.getSeconds() < 10) ? '0' + __date.getSeconds() : __date.getSeconds();\n  return '[' + __hours + ':' + __minutes + ':' + __seconds + '] ';\n}\n\nForaBotController.prototype.stop = function stop() {\n  console.log('Stop')\n  if (this.timeout) clearTimeout( this.timeout );\n  this.timeout = null;\n  this.status = 9;\n  this.timeoutOverwrite = 0;\n};\n\n// ForaBotController.prototype.checkResponse = function checkResponse( response ) {\n//   this.timeoutOverwrite = 10;\n//   var __status = this.bot[ this.currentStatus ];\n//   if (__status.buttons) {\n//     for (var i=0; i<__status.buttons.length; i++){\n//       var __regexp = new RegExp(__status.buttons[i].text, 'gi');\n//       if ( __regexp.test(response) ) {\n//         this.timeoutOverwrite = 0;\n//         this.next( __status.buttons[i].next );\n//         return true;\n//       }\n//     }\n//   }\n//   return false;\n// }\n\nForaBotController.prototype.send = function send( value ) {\n  if (this.botStatus == 2) { // Waiting\n    this.timeoutOverwrite = 10;\n    var __status = this.currentBot.status[ this.currentStatus ];\n    if (__status.buttons.length > 0) {\n      for (var i=0; i<__status.buttons.length; i++){\n        var __regexp = new RegExp(__status.buttons[i].caption, 'gi');\n        if ( __regexp.test(value) ) {\n          this.timeoutOverwrite = 0;\n          this.next( __status.buttons[i].next );\n          return true;\n        }\n      }\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nForaBotController.prototype.wait = function wait() {\n  this.status = 2; // Waiting\n}\n\nForaBotController.prototype.next = function next( value ) {\n  if ( typeof(value) != 'undefined' ) { // Received a new status\n    var __status = this.currentBot.status[ this.currentStatus ];\n    var __timeout = (__status) ? __status.getReadTime() : 500;\n    console.info(this.getTime() + 'ForaBotController[next] : Bot is typing (' + __timeout + ' ms)');\n    this.trigger('typing', { timeout: __timeout } );\n    this.currentStatus = value;\n    this.timeout = setTimeout(this.checkCurrent.bind(this), __timeout);\n  } else if (this.currentStatus) {\n    var __status = this.currentBot.status[ this.currentStatus ];\n    if ( typeof(__status.next) == 'undefined' || __status.next.length === undefined || __status.next.length === 0 ) {\n      this.wait();\n    } else {\n      if ( __status.next.length === 1 ) {\n        this.currentStatus = __status.next[0];\n      } else {\n        var __random = Math.floor(Math.random() * (__status.next.length));\n        this.currentStatus = __status.next[__random];\n      }\n      var __timeout = (__status) ? __status.getReadTime() : 500;\n      console.info(this.getTime() + 'ForaBotController[next] : Bot is typing (' + __timeout + ' ms)');\n      this.trigger('typing', { timeout: __timeout } );\n      this.timeout = setTimeout(this.checkCurrent.bind(this), __timeout);\n    }\n  }\n};\n","/**\n * ForaBotJs - Custom error class\n *\n * @constructor\n * @param {String} message - Error essage\n */\nfunction ForaBotError( message ) {\n  this.name = 'ForaBotError';\n  this.message = message || \"An error occurred :(\";\n}\n\nForaBotError.prototype = new Error();\nForaBotError.prototype.constructor = ForaBotError;\n","/**\n * ForaBotJs - Represents a bot status\n *\n * @constructor\n * @param {String} id - Status ID\n * @param {Object} data - Status data\n */\nfunction ForaBotStatus( id, data, super ) {\n  var __idValidator = new RegExp('^[0-9a-zA-Z_-]+$','g');\n  if ( typeof(id) === 'string' && __idValidator.test(id) ) {\n    this.id = id;\n    this.super = super;\n    if ( typeof(data) === 'object' ) {\n      for(var __key in data) {\n        this[__key] = data[__key];\n      }\n    } else {\n      this.super = super;\n      this.text = null;\n      this.next = [];\n      this.images = null;\n      this.buttons = [];\n      this.download = null;\n      this.code = null;\n      this.link = null;\n    }\n  } else {\n    throw new ForaBotError('ForaBotStatus : Status ID must be a valid string')\n  }\n}\n\nForaBotStatus.prototype.getReadTime = function getReadTime() {\n  var __time = 0;\n  if (this.super.autotypingTimeout) {\n    var __lastTime = localStorage.getItem('ForaBotStatus-' + this.super.id + '-' + this.id);\n    var __actualTime = Date.now();\n    if (__lastTime && (__actualTime - __lastTime < this.super.autotypingTimeout) ) {\n      __time = 50; // If message already loaded in last minute... no delay\n    }\n  }\n  if (__time === 0) {\n    if ( this.text ) {\n      __time += (this.text.split(/[\\s\\.\\,\\;\\:]/).length / 350) * 60000;\n    }\n    if ( this.image ) {\n      if ( typeof(this.image) == 'string' ) {\n        __time += 500;\n      } else {\n        __time += this.image.length * 500;\n      }\n    }\n    if ( this.download ) {\n      __time += 50;\n    }\n    if ( this.link ) {\n      __time += 50;\n    }\n    if ( this.code ) {\n      __time += (this.text.split(/[\\s\\.\\,\\;\\:]/).length / 350 / 2) * 60000;\n    }\n    if ( this.buttons ) {\n      __time += (this.buttons.length / 350) * 60000;\n    }\n  }\n  if (this.super.autotypingTimeout) {\n    localStorage.setItem('ForaBotStatus-' + this.super.id + '-' + this.id, Date.now());\n  }\n  return Math.floor(__time);\n};\n"]}
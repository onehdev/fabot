{"version":3,"sources":["ForaBot.js","ForaBotController.js","ForaBotError.js","ForaBotStatus.js"],"names":[],"mappingszIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"forabot.js","sourcesContent":["/**\n * ForaBotJs - Represents a bot\n *\n * @constructor\n * @param {String} id - Bot ID\n * @param {Object} data - Bot data\n */\nfunction ForaBot( id, data ) {\n  var __idValidator = new RegExp('^[0-9a-zA-Z_-]+$','g');\n  if ( typeof(id) === 'string' && __idValidator.test(id) ) {\n    this.id = id;\n    this.status = {};\n    if ( typeof(data) === 'object' ) {\n      this.name = data.name || null;\n      if ( typeof(data.status) === 'object' ) {\n        for ( var __key in data.status ) {\n          this.status[__key] = new ForaBotStatus( __key, data.status[__key] );\n        }\n      }\n    } else {\n      this.name = null;\n      this.status = {};\n    }\n  } else {\n    throw new ForaBotError('ForaBot : Bot ID must be a valid string')\n  }\n}\n","/**\n * ForaBotJs - Main controller\n *\n * @constructor\n * @param {Function} externalReceiver - Function that will be called when a bot sends a message\n */\nfunction ForaBotController( externalReceiver, endCallback ) {\n  this.botStatus = 0;\n  this.timeout = null;\n  this.timeoutOverwrite = 0;\n  this.currentStatus = null;\n  this.chatBox = null;\n  this.externalReceiver = externalReceiver;\n  this.currentBot = null;\n  this.endCallback = ( typeof(endCallback) == 'function' ) ? endCallback : null ;\n}\n\nForaBotController.prototype.load = function load( bot ) {\n  if (bot instanceof ForaBot) {\n    this.currentBot = bot;\n  } else {\n    throw new ForaBotError('ForaBotController.load : Cannot load received bot, must be a valid ForaBot instance')\n  }\n};\n\nForaBotController.prototype.start = function start() {\n  if (this.botStatus === 0) { // Off\n    this.currentStatus = 'init';\n    this.botStatus = 1; // Running\n    var __status = this.currentBot.status[ this.currentStatus ];\n    if ( __status ) {\n      //var __timeout = this.timeoutOverwrite || __status.timeout || Math.round(Math.random() * (1000 - 300)) + 300;\n      var __timeout = (__status) ? __status.getReadTime() : 1;\n      this.timeout = setTimeout(this.checkCurrent.bind(this), __timeout);\n    }\n  }\n};\n\nForaBotController.prototype.extend = function extend(defaults, overwrites){\n  for(var __key in overwrites) {\n    if( overwrites.hasOwnProperty(__key) ) {\n      defaults[__key] = overwrites[__key];\n    }\n  }\n  return defaults;\n}\n\nForaBotController.prototype.checkCurrent = function checkCurrent() {\n  if (this.currentStatus === false ) {\n    if ( this.endCallback ) this.endCallback();\n  } else if (this.currentStatus) {\n    var __status = this.currentBot.status[ this.currentStatus ];\n    if ( __status.type == 'put' ) {\n      this.botStatus = 1; // Running\n      var __message = this.extend( { id: Date.now() }, this.currentBot.status[ this.currentStatus ] );\n      this.externalReceiver( __message );\n    } else if ( __status.type == 'options' ) {\n      this.botStatus = 2; // Waiting\n      var __message = this.extend( { id: Date.now() }, this.currentBot.status[ this.currentStatus ] );\n      this.externalReceiver( __message );\n    }\n    this.next();\n  }\n};\n\nForaBotController.prototype.stop = function stop() {\n  console.log('Stop')\n  if (this.timeout) clearTimeout( this.timeout );\n  this.timeout = null;\n  this.status = 9;\n  this.timeoutOverwrite = 0;\n  this.chatBox = riot.mount('chat-box', {messages: window.messages}  );\n};\n\n// ForaBotController.prototype.checkResponse = function checkResponse( response ) {\n//   this.timeoutOverwrite = 10;\n//   var __status = this.bot[ this.currentStatus ];\n//   if (__status.buttons) {\n//     for (var i=0; i<__status.buttons.length; i++){\n//       var __regexp = new RegExp(__status.buttons[i].text, 'gi');\n//       if ( __regexp.test(response) ) {\n//         this.timeoutOverwrite = 0;\n//         this.next( __status.buttons[i].next );\n//         return true;\n//       }\n//     }\n//   }\n//   return false;\n// }\n\nForaBotController.prototype.send = function send( value ) {\n  if (this.botStatus == 2) { // Waiting\n    this.timeoutOverwrite = 10;\n    var __status = this.currentBot.status[ this.currentStatus ];\n    if (__status.buttons.length > 0) {\n      for (var i=0; i<__status.buttons.length; i++){\n        var __regexp = new RegExp(__status.buttons[i].text, 'gi');\n        if ( __regexp.test(value) ) {\n          this.timeoutOverwrite = 0;\n          this.next( __status.buttons[i].next );\n          return true;\n        }\n      }\n    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n};\n\nForaBotController.prototype.next = function next( value ) {\n  if (this.chatBox) this.chatBox[0].unmount(true);\n  if ( typeof(value) != 'undefined' ) {\n    var __status = this.currentBot.status[ this.currentStatus ];\n    //var __timeout = this.timeoutOverwrite || __status.timeout || Math.round(Math.random() * (1000 - 300)) + 300;\n    var __timeout = (__status) ? __status.getReadTime() : 50;\n    // Received a new status\n    this.currentStatus = value;\n    this.timeout = setTimeout(this.checkCurrent.bind(this), __timeout);\n  } else if (this.currentStatus) {\n    var __status = this.currentBot.status[ this.currentStatus ];\n    if ( typeof(__status.next) == 'undefined' || __status.next.length === undefined || __status.next.length === 0 ) {\n      //this.stop();\n    } else {\n      if ( __status.next.length === 1 ) {\n        this.currentStatus = __status.next[0];\n      } else {\n        var __random = Math.floor(Math.random() * (__status.next.length));\n        this.currentStatus = __status.next[__random];\n      }\n      //var __timeout = this.timeoutOverwrite || __status.timeout || Math.round(Math.random() * (1000 - 300)) + 300;\n      var __timeout = (__status) ? __status.getReadTime() : 50;\n      this.timeout = setTimeout(this.checkCurrent.bind(this), __timeout);\n    }\n  }\n};\n","/**\n * ForaBotJs - Custom error class\n *\n * @constructor\n * @param {String} message - Error essage\n */\nfunction ForaBotError( message ) {\n  this.name = 'ForaBotError';\n  this.message = message || \"An error occurred :(\";\n}\n\nForaBotError.prototype = new Error();\nForaBotError.prototype.constructor = ForaBotError;\n","/**\n * ForaBotJs - Represents a bot status\n *\n * @constructor\n * @param {String} id - Status ID\n * @param {Object} data - Status data\n */\nfunction ForaBotStatus( id, data ) {\n  var __idValidator = new RegExp('^[0-9a-zA-Z_-]+$','g');\n  if ( typeof(id) === 'string' && __idValidator.test(id) ) {\n    this.id = id;\n    if ( typeof(data) === 'object' ) {\n      this.type = data.type || null;\n      this.text = data.text || null;\n      this.next = data.next || [];\n      this.images = data.images || [];\n      this.buttons = data.buttons || [];\n      this.download = data.download || null;\n      this.code = data.code || null;\n      this.link = data.link || null;\n    } else {\n      this.type = null;\n      this.text = null;\n      this.next = [];\n      this.images = [];\n      this.buttons = [];\n      this.download = null;\n      this.code = null;\n      this.link = null;\n    }\n  } else {\n    throw new ForaBotError('ForaBotStatus : Status ID must be a valid string')\n  }\n}\n\nForaBotStatus.prototype.getReadTime = function getReadTime( ) {\n  var __time = localStorage.getItem('ForaBotStatus-' + this.id) || '0';\n  __time = parseFloat( __time );\n  if (__time === 0) {\n    if ( this.text ) {\n      __time += (this.text.split(/[\\s\\.\\,\\;\\:]/).length / 350) * 60000;\n    }\n    if ( this.images ) {\n      __time += this.images.length * 50;\n    }\n    if ( this.download ) {\n      __time += 50;\n    }\n    if ( this.link ) {\n      __time += 50;\n    }\n    if ( this.code ) {\n      __time += (this.text.split(/[\\s\\.\\,\\;\\:]/).length / 350 / 2) * 60000;\n    }\n    if ( this.images ) {\n      __time += (this.buttons.length / 350) * 60000;\n    }\n    localStorage.setItem('ForaBotStatus-' + this.id, 10);\n  }\n  return __time;\n};\n"]}